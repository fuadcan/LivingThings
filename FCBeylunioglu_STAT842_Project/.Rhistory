lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datname <- colnames(mdat)[numeric_columns][2]
cat(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
datname <- colnames(mdat)[numeric_columns]
datname
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
nores <- lapply(datnames, function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[1:4], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
nores <- lapply(datnames[-(1:4)], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
par(savepar)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
nores <- lapply(datnames[-(2:5)], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
par(savepar)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
nores <- lapply(datnames[-(1:5)], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
par(savepar)
bit_rate <- round(bitrate,-4)
bit_rate <- round(bit_rate,-4)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(log(get(datname)),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(log(get(datname))+.0001,main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(log(get(datname)+.0001),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
plot.quantile <- function(data, showHist = F, showOgive=F, showDensity=F, ...){
qvals <- sort(data)
pvals <- ppoints(length(qvals))
dat  <- data.frame(qvals,pvals)
vals <- seq(min(qvals),max(qvals),,10)
vals <- cbind(vals, sapply(vals, function(v) head(dat[dat[,1]>=v,2],1)))
locs <- cbind(1:(nrow(vals)-1), 2:nrow(vals))
drawbox <- function(x,y, ...) {
xvals <- c(x,rev(x),x[1])
yvals <- c(rep(y, each=2),y[1])
rect(min(xvals),min(yvals),max(xvals),max(yvals),col = adjustcolor("gray",.3))
lines(xvals, yvals, ...)
}
plot(pvals,qvals, cex=1.5,
xlab = "cumulative proportion",
col=adjustcolor('firebrick',.3), pch=16, type='o',...)
if (showOgive){
lines(x= c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98),
y= quantile(data, probs = c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98)),
type= 'o', col='steelblue', pch=19)
}
if(showHist){
noshow <- apply(locs, 1, function(r) drawbox(c(0,vals[r[2],2]-vals[r[1],2]),
c(vals[r[1],1],vals[r[2],1])))}
if(showDensity){
dens  <- density(data)
dens  <- data.frame(y=dens$y, x=dens$x)
dens$y <- dens$y*max(diff(vals)[,2])/max(dens$y)
lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
plot.quantile <- function(data, showHist = F, showOgive=F, showDensity=F, ...){
qvals <- sort(data)
pvals <- ppoints(length(qvals))
dat  <- data.frame(qvals,pvals)
vals <- seq(min(qvals),max(qvals),,10)
vals <- cbind(vals, sapply(vals, function(v) head(dat[dat[,1]>=v,2],1)))
locs <- cbind(1:(nrow(vals)-1), 2:nrow(vals))
drawbox <- function(x,y) {
xvals <- c(x,rev(x),x[1])
yvals <- c(rep(y, each=2),y[1])
rect(min(xvals),min(yvals),max(xvals),max(yvals),col = adjustcolor("gray",.3))
lines(xvals, yvals)
}
plot(pvals,qvals, cex=1.5,
xlab = "cumulative proportion",
col=adjustcolor('firebrick',.3), pch=16, type='o',...)
if (showOgive){
lines(x= c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98),
y= quantile(data, probs = c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98)),
type= 'o', col='steelblue', pch=19)
}
if(showHist){
noshow <- apply(locs, 1, function(r) drawbox(c(0,vals[r[2],2]-vals[r[1],2]),
c(vals[r[1],1],vals[r[2],1])))}
if(showDensity){
dens  <- density(data)
dens  <- data.frame(y=dens$y, x=dens$x)
dens$y <- dens$y*max(diff(vals)[,2])/max(dens$y)
lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
nores <- lapply(datnames[-(1:5)], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname)
)
par(savepar)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(log(get(datname)+.0001),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
nores <- lapply(datnames[-(1:5)], function(datname)
plot.quantile(log(get(datname)+.0001),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
par(savepar)
bit_rate <- round(bit_rate,-4)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(log(get(datname)+1),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
nores <- lapply(datnames[-(1:5)], function(datname)
plot.quantile(log(get(datname)+1),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
par(savepar)
numeric_columns <- which(sapply(1:ncol(mdat), function(i) is.numeric(mdat[,i])))
datnames <- colnames(mdat)[numeric_columns]
savepar <- par(mfrow=c(2,2))
nores <- lapply(datnames[2:5], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
nores <- lapply(datnames[-(1:5)], function(datname)
plot.quantile(get(datname),main=paste0('Quantile Plot of ',datname),
ylab=datname, showHist=T)
)
par(savepar)
plot.quantile <- function(data, showHist = F, showOgive=F, showDensity=F, ...){
qvals <- sort(data)
pvals <- ppoints(length(qvals))
dat  <- data.frame(qvals,pvals)
vals <- seq(min(qvals),max(qvals),,10)
vals <- cbind(vals, sapply(vals, function(v) head(dat[dat[,1]>=v,2],1)))
locs <- cbind(1:(nrow(vals)-1), 2:nrow(vals))
drawbox <- function(x,y) {
xvals <- c(x,rev(x),x[1])
yvals <- c(rep(y, each=2),y[1])
rect(min(xvals),min(yvals),max(xvals),max(yvals),col = adjustcolor("gray",.3))
lines(xvals, yvals)
}
plot(pvals,qvals, cex=1.5,
xlab = "cumulative proportion",
col=adjustcolor('firebrick',.3), pch=16, type='o',...)
if (showOgive){
lines(x= c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98),
y= quantile(data, probs = c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98)),
type= 'o', col='steelblue', pch=19)
}
if(showHist){
noshow <- apply(locs, 1, function(r) drawbox(c(0,vals[r[2],2]-vals[r[1],2]),
c(vals[r[1],1],vals[r[2],1])))}
if(showDensity){
dens  <- density(data)
dens  <- data.frame(y=dens$y, x=dens$x)
dens$y <- dens$y*max(diff(vals)[,2])/max(dens$y)
lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
tform <- function(data, alpha){if(alpha==0){log(data)} else {(data^alpha-1)/alpha}}
# library("qqtest")
#
# savePar <- par(mfrow = c(1,2))
plothist <- function(dat, ...){
hist(dat,prob = T,...)
lines(density(dat))
polygon(density(dat), col = adjustcolor("grey",.6))
}
# qqtest(dat)
# par(savePar)
plot.quantile <- function(data, showHist = F, showOgive=F, showDensity=F, ...){
qvals <- sort(data)
pvals <- ppoints(length(qvals))
dat  <- data.frame(qvals,pvals)
vals <- seq(min(qvals),max(qvals),,10)
vals <- cbind(vals, sapply(vals, function(v) head(dat[dat[,1]>=v,2],1)))
locs <- cbind(1:(nrow(vals)-1), 2:nrow(vals))
drawbox <- function(x,y) {
xvals <- c(x,rev(x),x[1])
yvals <- c(rep(y, each=2),y[1])
rect(min(xvals),min(yvals),max(xvals),max(yvals),col = adjustcolor("gray",.3))
lines(xvals, yvals)
}
plot(pvals,qvals, cex=1.5,
xlab = "cumulative proportion",
col=adjustcolor('firebrick',.3), pch=16, type='o',...)
if (showOgive){
lines(x= c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98),
y= quantile(data, probs = c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98)),
type= 'o', col='steelblue', pch=19)
}
if(showHist){
noshow <- apply(locs, 1, function(r) drawbox(c(0,vals[r[2],2]-vals[r[1],2]),
c(vals[r[1],1],vals[r[2],1])))}
if(showDensity){
dens  <- density(data)
dens  <- data.frame(y=dens$y, x=dens$x)
dens$y <- dens$y*max(diff(vals)[,2])/max(dens$y)
lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
tform <- function(data, alpha){if(alpha==0){log(data)} else {(data^alpha-1)/alpha}}
# library("qqtest")
#
# savePar <- par(mfrow = c(1,2))
plot.hist <- function(dat, showdDensity=F,...){
hist(dat,prob = T,...)
lines(density(dat))
polygon(density(dat), col = adjustcolor("grey",.6))
}
# qqtest(dat)
# par(savePar)
plot.quantile(log(bit_rate))
# plot.quantile(log(bit_rate))
log(bit_rate)
plot.quantile(log(bit_rate[bit_rate!=0]))
# log(bit_rate[bit_rate!=0])
plot.quantile(log(bit_rate[bit_rate!=0]), showDensity = T)
# log(bit_rate[bit_rate!=0])
plot.hist(log(bit_rate[bit_rate!=0]))
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate)
# log(bit_rate[bit_rate!=0])
density(bit_rate)
aa <- density(bit_rate)
aa$y
aa$bw
hist(bit_r)
hist(bit_rate)
hist(bit_rate, probability = T)
densCols()
plot.hist <- function(dat, showdDensity=F,...){
if(showDensity){dens <- density(dat)
yrange <- range(dens$y)
hist(dat, probability = T,ylim = yrange)
lines(dens)
polygon(dens, col = adjustcolor("grey",.6))
} else {
hist(dat, probability = T)
}
}
plot.hist(bit_rate)
plot.hist <- function(dat, showDensity=F,...){
if(showDensity){dens <- density(dat)
yrange <- range(dens$y)
hist(dat, probability = T,ylim = yrange)
lines(dens)
polygon(dens, col = adjustcolor("grey",.6))
} else {
hist(dat, probability = T)
}
}
plot.hist(bit_rate)
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, showDensity = T)
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col='grey60')
# log(bit_rate[bit_rate!=0])
hist(dens)
plot.hist(bit_rate, fill='grey60')
# log(bit_rate[bit_rate!=0])
plot.quantile <- function(data, showHist = F, showOgive=F, showDensity=F, ...){
qvals <- sort(data)
pvals <- ppoints(length(qvals))
dat  <- data.frame(qvals,pvals)
vals <- seq(min(qvals),max(qvals),,10)
vals <- cbind(vals, sapply(vals, function(v) head(dat[dat[,1]>=v,2],1)))
locs <- cbind(1:(nrow(vals)-1), 2:nrow(vals))
drawbox <- function(x,y) {
xvals <- c(x,rev(x),x[1])
yvals <- c(rep(y, each=2),y[1])
rect(min(xvals),min(yvals),max(xvals),max(yvals),col = adjustcolor("gray",.3))
lines(xvals, yvals)
}
plot(pvals,qvals, cex=1.5,
xlab = "cumulative proportion",
col=adjustcolor('firebrick',.3), pch=16, type='o',...)
if (showOgive){
lines(x= c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98),
y= quantile(data, probs = c(0.02, 0.09, 0.25, 0.50, 0.75, 0.91, 0.98)),
type= 'o', col='steelblue', pch=19)
}
if(showHist){
noshow <- apply(locs, 1, function(r) drawbox(c(0,vals[r[2],2]-vals[r[1],2]),
c(vals[r[1],1],vals[r[2],1])))}
if(showDensity){
dens  <- density(data)
dens  <- data.frame(y=dens$y, x=dens$x)
dens$y <- dens$y*max(diff(vals)[,2])/max(dens$y)
lines(dens$y,dens$x)
polygon(dens$y,dens$x, col=adjustcolor("grey",0.5))
}
}
tform <- function(data, alpha){if(alpha==0){log(data)} else {(data^alpha-1)/alpha}}
# library("qqtest")
#
# savePar <- par(mfrow = c(1,2))
plot.hist <- function(dat, showDensity=F,...){
if(showDensity){dens <- density(dat)
yrange <- range(dens$y)
hist(dat, probability = T,ylim = yrange,...)
lines(dens)
polygon(dens, col = adjustcolor("grey",.6))
} else {
hist(dat, probability = T,...)
}
}
# qqtest(dat)
# par(savePar)
bit_rate <- round(bit_rate,-4)
plot.hist(bit_rate, fill='grey60')
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col='grey60')
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col=adjustcolor('grey60',.6))
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
with(subset(mdat, genres_all=='Rock'),plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate'))
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
with(subset(mdat, genres_all=='Rock'),plot.hist(mdat$bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate'))
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(subset(mdat, genres_all=='Rock'), col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
mdat, genres_all=='Rock')
subset(mdat, genres_all=='Rock')
mdat
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(subset(mdat, genre_top=='Rock'), col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate[genre_top=='Rock'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate[genre_top=='Hip hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate[genre_top=='Hip Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
genre_top
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(duration, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.01), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(comments,1), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(comments,-.5), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(comments,-.5), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(comments,-1), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,-1), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,1), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(coments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(interest,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(interest,-.5), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(interest,0), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(bit_rate, col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# plot.hist(bit_rate[genre_top=='Hip-Hop'], col=adjustcolor('grey60',.6), main='Histogram of Bit Rate')
# log(bit_rate[bit_rate!=0])
plot.hist(log(duration), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(duration,.00), col=adjustcolor('grey60',.6),showDensity = T, main='Histogram of Bit Rate')
plot.hist(tform(favorites,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(comments,.01), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
plot.hist(tform(interest,-.13), col=adjustcolor('grey60',.6),showDensity = F, main='Histogram of Bit Rate')
